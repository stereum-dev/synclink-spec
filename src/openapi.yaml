openapi: "3.0.0"

info:
  x-logo:
    url: "https://synclink.io/wp-content/uploads/2022/11/cropped-SyncLink_CurrentLogo-1024x1024.png"
    backgroundColor: "#A7ABCC"
    altText: "synclink logo"
  version: 1.0.0
  title: SyncLink API Specification
  description: SyncLink client and server specification.
  license:
    name: MIT
    url: https://github.com/stereum-dev/synclink-spec/blob/main/LICENSE
  contact:
    name: Support
    url: http://synclink.io
    email: stereum@stereum.net

tags:
  - name: Synclink Server
  - name: Synclink Client

paths:
  /api/v1/packages/syncpoint:
    $ref: api/packages/checkpoint.yaml

  /eth/v1/beacon/states/{state_id}/finality_checkpoints:
    $ref: api/beacon/states/finality_checkpoints.yaml
  /eth/v1/node/version:
    $ref: api/node/version.yaml
  /eth/v2/beacon/blocks/{block_id}:
    $ref: api/beacon/blocks/block.v2.yaml
  /eth/v2/debug/beacon/states/{state_id}:
    $ref: api/debug/state.v2.yaml
  /eth/v1/beacon/blocks/{block_id}/root:
    $ref: api/beacon/blocks/root.yaml

components:
  schemas:
    Epoch:
      $ref: "./types/synclink.yaml#/Epoch"
    BeaconState:
      $ref: "./types/state.yaml#/BeaconState"
    BeaconBlock:
      $ref: "./types/block.yaml#/BeaconBlock"
    SignedBeaconBlock:
      $ref: "./types/block.yaml#/SignedBeaconBlock"
    SignedBeaconBlockHeader:
      $ref: "./types/block.yaml#/SignedBeaconBlockHeader"
    ValidatorResponse:
      $ref: "./types/api.yaml#/ValidatorResponse"
    ValidatorBalanceResponse:
      $ref: "./types/api.yaml#/ValidatorBalanceResponse"
    ValidatorStatus:
      $ref: "./types/api.yaml#/ValidatorStatus"
    Committee:
      $ref: "./types/api.yaml#/Committee"
    AttesterSlashing:
      $ref: "./types/attester_slashing.yaml#/AttesterSlashing"
    ProposerSlashing:
      $ref: "./types/proposer_slashing.yaml#/ProposerSlashing"
    SignedVoluntaryExit:
      $ref: "./types/voluntary_exit.yaml#/SignedVoluntaryExit"
    AttesterDuty:
      $ref: "./types/validator.yaml#/AttesterDuty"
    ProposerDuty:
      $ref: "./types/validator.yaml#/ProposerDuty"
    Altair.SyncDuty:
      $ref: "./types/validator.yaml#/Altair/SyncDuty"
    SignedAggregateAndProof:
      $ref: "./types/validator.yaml#/SignedAggregateAndProof"
    Attestation:
      $ref: "./types/attestation.yaml#/Attestation"
    AttestationData:
      $ref: "./types/attestation.yaml#/AttestationData"
    Fork:
      $ref: "./types/misc.yaml#/Fork"
    Checkpoint:
      $ref: "./types/misc.yaml#/Checkpoint"
    Uint64:
      $ref: "./types/primitive.yaml#/Uint64"
    NetworkIdentity:
      $ref: "./types/p2p.yaml#/NetworkIdentity"
    Peer:
      $ref: "./types/p2p.yaml#/Peer"
    PeerId:
      $ref: "./types/p2p.yaml#/PeerId"
    PeerConnectionState:
      $ref: "./types/p2p.yaml#/PeerConnectionState"
    PeerConnectionDirection:
      $ref: "./types/p2p.yaml#/PeerConnectionDirection"
    GenesisTime:
      $ref: "./types/primitive.yaml#/GenesisTime"
    Version:
      $ref: "./types/primitive.yaml#/Version"
    ForkVersion:
      $ref: "./types/primitive.yaml#/ForkVersion"
    DependentRoot:
      $ref: "./types/primitive.yaml#/DependentRoot"
    ExecutionOptimistic:
      $ref: "./types/primitive.yaml#/ExecutionOptimistic"
    Root:
      $ref: "./types/primitive.yaml#/Root"
    Hex:
      $ref: "./types/primitive.yaml#/Hex"
    Graffiti:
      $ref: "./types/primitive.yaml#/Graffiti"
    Signature:
      $ref: "./types/primitive.yaml#/Signature"
    ErrorMessage:
      $ref: "./types/http.yaml#/ErrorMessage"
    IndexedErrorMessage:
      $ref: "./types/http.yaml#/IndexedErrorMessage"
    Altair.SignedBeaconBlock:
      $ref: "./types/altair/block.yaml#/Altair/SignedBeaconBlock"
    Altair.BeaconBlock:
      $ref: "./types/altair/block.yaml#/Altair/BeaconBlock"
    Altair.BeaconState:
      $ref: "./types/altair/state.yaml#/Altair/BeaconState"
    Altair.SyncCommitteeSignature:
      $ref: "./types/altair/sync_committee.yaml#/Altair/SyncCommitteeSignature"
    Altair.SyncCommitteeSubscription:
      $ref: "./types/altair/sync_committee.yaml#/Altair/SyncCommitteeSubscription"
    Altair.SyncCommitteeContribution:
      $ref: "./types/altair/sync_committee.yaml#/Altair/SyncCommitteeContribution"
    Altair.SyncCommittee:
      $ref: "./types/altair/sync_committee.yaml#/Altair/SyncCommitteeByValidatorIndices"
    ExecutionAddress:
      $ref: "./types/primitive.yaml#/ExecutionAddress"
    Bellatrix.BeaconState:
      $ref: "./types/bellatrix/state.yaml#/Bellatrix/BeaconState"
    Bellatrix.BeaconBlock:
      $ref: "./types/bellatrix/block.yaml#/Bellatrix/BeaconBlock"
    Bellatrix.SignedBeaconBlock:
      $ref: "./types/bellatrix/block.yaml#/Bellatrix/SignedBeaconBlock"
    Bellatrix.BlindedBeaconBlock:
      $ref: "./types/bellatrix/block.yaml#/Bellatrix/BlindedBeaconBlock"
    Bellatrix.SignedBlindedBeaconBlock:
      $ref: "./types/bellatrix/block.yaml#/Bellatrix/SignedBlindedBeaconBlock"
    ConsensusVersion:
      enum: [phase0, altair, bellatrix]
      example: "phase0"
    SignedValidatorRegistration:
      $ref: "./types/registration.yaml#/SignedValidatorRegistration"

  parameters:
    StateId:
      $ref: "./params/index.yaml#/StateId"
    BlockId:
      $ref: "./params/index.yaml#/BlockId"

  headers:
    Eth-Consensus-Version:
      description: Required in response so client can deserialize returned json or ssz data more effectively.
      required: true
      schema:
        $ref: "#/components/schemas/ConsensusVersion"

  responses:
    InvalidRequest:
      $ref: "./types/http.yaml#/InvalidRequest"
    NotFound:
      $ref: "./types/http.yaml#/NotFound"
    InternalError:
      $ref: "./types/http.yaml#/InternalError"
    CurrentlySyncing:
      $ref: "./types/http.yaml#/CurrentlySyncing"
